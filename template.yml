AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: An AWS Lambda application that integrates processes scanned documents from Kofax Capture.

Parameters:
  Environment:
    Type: String
    Default: development
    Description: Parameter for the environment
    AllowedValues: ["development", "uat", "stag", "production"]
  OnPremIpRange:
    Type: String
    Default: "192.168.0.1/16"
    Description: "The CIDR range for CICA's on premise"

Mappings:
  EnvironmentMap:
    development:
      VpcId: vpc-0e42a25379fa895ec
      SubnetIdA: subnet-02f7ae7f6b1db987f
      SubnetIdB: subnet-0a5e7b48efcb931ba
      UserEnvironment: dev
      KtaBucketKmsKey: 64cd9108-3ab8-4179-a7aa-850198da4afd
    uat:
      VpcId: vpc-0254c4e3ea99b07d1
      SubnetIdA: subnet-0fd3a560d90368fdc
      SubnetIdB: subnet-078b2047045b77bb0
      UserEnvironment: uat
      KtaBucketKmsKey: af68391f-0be7-4a9b-81a2-4e89bcc7025b
    stag:
      VpcId: vpc-0e42a25379fa895ec
      SubnetIdA: subnet-02f7ae7f6b1db987f
      SubnetIdB: subnet-0a5e7b48efcb931ba
      UserEnvironment: dev
      KtaBucketKmsKey: 64cd9108-3ab8-4179-a7aa-850198da4afd
    production:
      VpcId: vpc-010157aa3b29e0752
      SubnetIdA: subnet-0d1fcbfc03a28f433
      SubnetIdB: subnet-08c81bc6ffb13be3d
      UserEnvironment: prod
      KtaBucketKmsKey: c484249e-f227-472f-a16e-e823ead42d5b
Resources:
  function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          SCANNING_QUEUE: !Ref scanningQueue
          DEFAULT_PREFIX: 'scanned-documents'
          KMS_KEY: !FindInMap [EnvironmentMap, !Ref Environment, KtaBucketKmsKey]
      CodeUri: function/.
      Description: Call the AWS Lambda API
      Timeout: 30
      # Trigger
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "rate(1 minute)"
      # Function's execution role
      Role: !GetAtt kofaxProcessorRole.Arn
      Tracing: Active
      Layers:
        - !Ref libs
      VpcConfig:
        SubnetIds:
          [
            !FindInMap [EnvironmentMap, !Ref Environment, SubnetIdA],
            !FindInMap [EnvironmentMap, !Ref Environment, SubnetIdB],
          ]
        SecurityGroupIds: [!Ref kofaxProcessorSecurityGroup]
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: kofax-scanner-nodejs-lib
      Description: Dependencies for the kofax scanning processor function.
      ContentUri: lib/.
      CompatibleRuntimes:
        - nodejs18.x
  kofaxProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: KofaxScannerFunctionQueuePolicy
                Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "*"
              - Sid: KofaxScannerFunctionS3Policy
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: "*"
              - Sid: KofaxScannerFunctionSecretsPolicy
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - secretsmanager:GetSecretValue
                Resource: "*"
              - Sid: KofaxScannerKmsPolicy
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: "*"       
  scanningQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: KofaxScanningQueue
      KmsMasterKeyId: !Ref scanningQueueKey
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt scanningDLQ.Arn
        maxReceiveCount: 3
  scanningDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: KofaxScanningDLQ
      KmsMasterKeyId: !Ref scanningQueueKey
  scanningQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: Allow write from S3 Service
            Effect: Allow
            Action: "sqs:SendMessage"
            Resource: !GetAtt scanningQueue.Arn
            Principal:
              Service: "s3.amazonaws.com"
            Condition:
              StringEquals: 
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
              ArnLike: 
                "aws:SourceArn": !Sub "arn:aws:s3:*:*:kofax-storage-gateway-bucket-${Environment}"
          - Sid: Allow read from function
            Effect: Allow
            Action: "sqs:ReceiveMessage"
            Resource: !GetAtt scanningQueue.Arn
            Principal:
              AWS: !GetAtt kofaxProcessorRole.Arn
          - Sid: Allow read and write
            Effect: Allow
            Action: 
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage"
            Resource: !GetAtt scanningQueue.Arn
            Principal:
              AWS: !Sub
                - 'arn:aws:iam::${AWS::AccountId}:user/JackBurt_${UserEnv}'
                - UserEnv: !FindInMap [EnvironmentMap, !Ref Environment, UserEnvironment]
      Queues:
        - !Ref scanningQueue
  scanningQueueKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: A symmetric encryption KMS key to encrypt the Kofax Scanning queues
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: "2012-10-17"
        Id: kofax-scanning-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'             
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: 
                - !GetAtt kofaxProcessorRole.Arn
                - !Sub
                  - 'arn:aws:iam::${AWS::AccountId}:user/JackBurt_${UserEnv}'
                  - UserEnv: !FindInMap [EnvironmentMap, !Ref Environment, UserEnvironment]
            Action:
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey"
              - "kms:GenerateDataKeyWithoutPlaintext"
            Resource: "*"
          - Sid: Allow S3 service
            Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action:
              - "kms:GenerateDataKey"
              - "kms:Decrypt"
            Resource: "*"
  kofaxProcessorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - "KofaxScanningProcessorSecurityGroup${Env}"
        - Env: !Ref Environment
      GroupDescription: Security group for the kofax scanning processor lamdba function to allow communications out to Tempus.
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VpcId]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref OnPremIpRange
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
